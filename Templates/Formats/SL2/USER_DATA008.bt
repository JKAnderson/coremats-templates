//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: SL2/USER_DATA008.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: Coremats
// File Mask: USER_DATA008
//  ID Bytes: 10 00 40 00
//   History: 
//------------------------------------------------

#include "../../Common.bt"
#include "../../Chunk.bt"
#include "SL2-Types.bt"

struct BlockDataMemberList;
struct BlockDataResult;
struct BlockDataSummary;

LittleEndian();

//------------------------------------------------

COREMATS_CHUNK_START

case "---- begin ----":
case "----  end  ----":
    Assert(header.version == 0 && header.length == 0);
    break;

case "Account":
    Assert(header.version == 2 && header.length == 0xd);
    ubyte data[header.length];
    break;
    
case "AcName":
    Assert(header.version == 0);
    wstring acName;
    break;
    
case "Assemble":
    Assert(header.version == 0);
    ubyte data[header.length];
    break;
    
case "Emblem":
    Assert(header.version == 0);
    ubyte data[header.length];
    break;

case "MemberList":
    Assert(header.version == 0);
    BlockDataMemberList memberList(header);
    break;
    
case "NamePlate":
    Assert(header.version == 0 && header.length == 0x40);
    ubyte data[header.length];
    break;
    
case "PilotName":
    Assert(header.version == 0);
    wstring pilotName;
    break;
    
case "Result":
    Assert(header.version == 1 && header.length == 5);
    BlockDataResult result;
    break;
    
case "Summary":
    Assert(header.version == 1 && header.length == 0x40);
    BlockDataSummary summary;
    break;
        
COREMATS_CHUNK_END Chunk <read=ReadChunkHeader(header), optimize=false>;

//------------------------------------------------

typedef struct {
    byte unk00; Assert(unk00 == 2); // Team count?
    byte memberCount;
    byte unk02; // Winning team?
    byte unk03; // Match type?
    int unk04 <hidden=true>; Assert(unk04 == 0);
    FILETIME timestamp;
    ubyte unk10[8]; // More timestamp? GUID? Hash? I have no idea.
    int teamAlphaPoints;
    int teamBetaPoints;
    int missionId;
    int unk24 <hidden=true>; Assert(unk24 == 0);
    int unk28 <hidden=true>; Assert(unk28 == 0);
    int unk2c <hidden=true>; Assert(unk2c == 0);
    int unk30 <hidden=true>; Assert(unk30 == 0);
    int unk34 <hidden=true>; Assert(unk34 == 0);
    uquad matchId;
} BlockDataSummary;


typedef struct {
    Chunk begin("---- begin ----");
    Chunk account("Account");
    Chunk result("Result");
    
    // Spectators only have an AcName instead of a full Assemble
    if (PeekChunkSignature() == "AcName") {
        Chunk acName("AcName");
    } else {
        Chunk assemble("Assemble");
    }
    
    Chunk emblem("Emblem");
    Chunk pilotName("PilotName");
    Chunk namePlate("NamePlate");
    Chunk end("----  end  ----");
} Member <read=pilotName.pilotName, optimize=false>;

typedef struct (ChunkHeader &header) {
    // You can get the member count from the summary block,
    // but I prefer for it to be independent
    local quad start <hidden=true> = FTell();
    while (FTell() - start < header.length) {
        Member members;
    }
} BlockDataMemberList <optimize=false>;


typedef struct {
    enum <byte> { ALPHA, BETA, SPECTATOR } team;
    int points;
} BlockDataResult;

//------------------------------------------------

typedef struct {
    int unk00; Assert(unk00 == 0);
    int unk04; Assert(unk04 == 0);
    int unk08; Assert(unk08 == 0);
    int matchCount;
} Header <bgcolor=cLtRed>;


typedef struct {
    Chunk begin("---- begin ----");
    Chunk summary("Summary");
    Chunk memberList("MemberList");
    Chunk end("----  end  ----");
} Match <optimize=false>;

//------------------------------------------------

Sl2File file(0x400010);
Header header;
Match matches[header.matchCount];
