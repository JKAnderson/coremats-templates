//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: ESD-DLSE.bt
//   Authors: TKGP
//   Version: 
//   Purpose: Demon's Souls ESD
//  Category: Coremats
// File Mask: *.esd
//  ID Bytes: 44 4C 53 45
//   History: 
//------------------------------------------------

#include "../Common.bt"

struct EzStateEvaluator;
struct DLVector_Reference;
struct DLVector_Byte;
struct Buffer;
struct Reference;

string GetTypeName(int type) {
    return header.strings[type - 1].str;    
}

BigEndian();

//------------------------------------------------

typedef struct {
    int length;
    char str[length];
} SharedString <read=str, optimize=false>;

typedef struct {
    char magic[4]; Assert(magic == "DLSE");
    short unk04; Assert(unk04 == 2);
    short version; Assert(version == 1 || version == 3);
    if (version == 3) {
        int unk08;
        int count0c;
        int unk10; // Consistently 2 more than the highest ID
    }
    short stringCount;
    SharedString strings[stringCount];
} Header <bgcolor=cLtRed>;


typedef struct {
    short type; Assert(GetTypeName(type) == "EzStateProject");
    int version; Assert(version == 2);
    DLVector_Reference maps;
} EzStateProject <read=GetTypeName(type), bgcolor=cLtGreen>;


typedef struct {
    short type; Assert(GetTypeName(type) == "EzStateMap");
    int version; Assert(version == 1 || version == 2);
    int unk06; // Seems to match the index in the project
    Reference unkState; // Initial state?
    DLVector_Reference states;
    if (version == 2) {
        DLVector_Reference transitions;
    }
} EzStateMap <read=GetTypeName(type), bgcolor=cGreen>;


typedef struct {
    short type; Assert(GetTypeName(type) == "EzStateMapState");
    int version; Assert(version == 1 || version == 2);
    int unk06; // Seems to match the index in the map
    DLVector_Reference transitions;
    DLVector_Reference externalEventsA; // Enter events?
    DLVector_Reference externalEventsB; // Exit events?
} EzStateMapState <read=GetTypeName(type), bgcolor=cDkGreen, optimize=false>;


typedef struct {
    short type; Assert(GetTypeName(type) == "EzStateTransition");
    int version; Assert(version == 1 || version == 3);
    if (version == 1) {
        Reference condition;
        Reference state;
        DLVector_Reference unkVec; Assert(!unkVec.count);
    } else if (version == 3) {
        Buffer condition;
        DLVector_Reference events;
    }
} EzStateTransition <read=GetTypeName(type), bgcolor=cLtYellow, optimize=false>;


typedef struct {
    short type; Assert(GetTypeName(type) == "EzStateTransitionHostEvent");
    int version; Assert(version == 1);
} EzStateTransitionHostEvent <read=GetTypeName(type), bgcolor=cYellow, optimize=false>;


typedef struct {
    short type; Assert(GetTypeName(type) == "EzState::detail::EzStateCondition");
    int version; Assert(version == 1);
    EzStateEvaluator evaluator;
} EzStateCondition <bgcolor=cDkYellow>;


typedef struct {
    short type; Assert(GetTypeName(type) == "EzStateEvaluator");
    int version; Assert(version == 1);
    DLVector_Byte buffer;
} EzStateEvaluator <bgcolor=cRed, optimize=false>;


typedef struct {
    short type; Assert(GetTypeName(type) == "EzStateExternalEvent");
    int version; Assert(version == 1);
    int unk06; // Event ID?
    int count0a;
    if (count0a > 1) {
        EzStateEvaluator evaluators[count0a - 1]; // Arguments?
    }
} EzStateExternalEvent <read=GetTypeName(type), bgcolor=cAqua>;


typedef struct {
    short type; Assert(GetTypeName(type) == "EzStateExternalEventT<ES_EVENT_PARAM_NUM_6>");
    int version; Assert(version == 1 || version == 2);
    int unk06; // Event ID?
    int count0a;
    if (count0a > 1) {
        if (version == 1) {
            EzStateEvaluator evaluators[count0a - 1]; // Arguments?
        } else if (version == 2) {
            Buffer buffers[count0a - 1]; // Arguments?
        }
    }
} EzStateExternalEventT <read=GetTypeName(type), bgcolor=cAqua>;


typedef struct {
    short type; Assert(GetTypeName(type) == "DLVector");
    int count;
    if (count) {
        Reference items[count];
    }
} DLVector_Reference <read=Str("%s[%i]", GetTypeName(type), count), bgcolor=cWhite>;


typedef struct {
    short type; Assert(GetTypeName(type) == "DLVector");
    int length;
    ubyte data[length];
} DLVector_Byte <bgcolor=cBlack, fgcolor=cWhite, optimize=false>;


typedef struct {
    short type; Assert(GetTypeName(type) == "buffer");
    int length;
    ubyte data[length];
} Buffer <bgcolor=cBlack, fgcolor=cWhite, optimize=false>;


// This is purely a performance optimization;
// searching a single flat list takes a very long time
const int REF_SIZE <hidden=true> = 8192;
const int REF_BUCKETS <hidden=true> = 31;
const int REF_BUCKET_SIZE <hidden=true> = REF_SIZE / REF_BUCKETS;

struct {
    local int refCount = 0;
    local int refIds[REF_BUCKET_SIZE];
} _buckets[REF_BUCKETS] <hidden=true, optimize=false>;

int addReference(int id) {
    if (!id)
        return false;
    
    local int bucket = id % REF_BUCKETS;
    local int refCount = _buckets[bucket].refCount;
    
    local int i;
    for (i = 0; i < refCount; i++) {
        if (_buckets[bucket].refIds[i] == id)
            return false;
    }
    
    Assert(refCount < REF_BUCKET_SIZE, "Please download a bigger bucket.");
    _buckets[bucket].refIds[refCount] = id;
    _buckets[bucket].refCount++;
    return true;
}

typedef struct {
    short type;
    int id;
    
    local int hasData <hidden=true> = addReference(id);
    if (!hasData) return;
    
    switch (GetTypeName(type)) {
        case "EzStateMap":
            EzStateMap map; break;
        case "EzStateMapState":
            EzStateMapState state; break;
        case "EzStateTransition":
            EzStateTransition transition; break;
        case "EzStateTransitionHostEvent":
            EzStateTransitionHostEvent transitionHostEvent; break;
        case "EzState::detail::EzStateCondition":
            EzStateCondition condition; break;
        case "EzStateExternalEvent":
            EzStateExternalEvent externalEvent; break;
        case "EzStateExternalEventT<ES_EVENT_PARAM_NUM_6>":
            EzStateExternalEventT externalEventT; break;
            
        default: Assert(false);
    }
} Reference <read=ReadReference, bgcolor=cPurple, optimize=false>;

string ReadReference(Reference &ref) {
    if (ref.hasData)
        return Str("%d <- %s", ref.id, GetTypeName(ref.type));
    else
        return Str("%d -> %s", ref.id, GetTypeName(ref.type));    
}

//------------------------------------------------

Header header;
EzStateProject project;
quad unkX00 <format=hex, bgcolor=cLtPurple>;
if (header.version == 3) {
    Reference unkReferences[header.count0c];
}
