//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: EMBLEM.BT
//   Authors: TKGP, B3
//   Version: 
//   Purpose: 
//  Category: Coremats
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "../Common.bt"
#include "../Chunk.bt"

struct ChunkDataDateTime;
struct ChunkDataImage;

LittleEndian();

//------------------------------------------------

COREMATS_CHUNK_START

case "---- begin ----":
case "----  end  ----":
    Assert(header.version == 0 && header.length == 0);
    break;
    
case "Category":
    Assert(header.version == 0 && header.length == 1);
    byte category;
    break;

case "CreatorID":
    Assert(header.version == 0 && header.length == 8);
    quad creatorId;
    break;

case "DateTime":
    Assert(header.version == 0 && header.length == 0x10);
    ChunkDataDateTime dateTime;
    break;
    
case "Image":
    Assert(header.version == 0);
    ChunkDataImage image;
    break;

case "UgcID":
    Assert(header.version == 0);
    wstring ugcId;
    break;
    
COREMATS_CHUNK_END EmblemChunk <read=ReadChunkHeader(header), optimize=false>;

//------------------------------------------------

typedef struct {
    FILETIME fileTime;
    PackedSystemTime systemTime;
} ChunkDataDateTime;


// Thanks B3
struct Piece;
typedef struct {
    short id;
    short x;
    short y;
    short scaleX;
    short scaleY;
    short angle;
    RGBA color;
    short mode;
    short unk12 <hidden=true>; Assert(!unk12);
    
    if ((id & 0x3f00) == 0x3f00) {
        int childCount;
        Piece children[childCount];
    }
} Piece <optimize=false>;

typedef struct {
    short unk00; Assert(unk00 == 3);
    short unk02; Assert(unk02 == 1);
    Piece pieces;
} Layer <optimize=false>;

typedef struct {
    short unk00; Assert(unk00 == 0);
    short layerCount;
    Layer layers[layerCount];
} ChunkDataImage;

//------------------------------------------------

#ifdef COREMATS_EMBLEM_LIB
typedef struct {
#endif

EmblemChunk begin("---- begin ----");
EmblemChunk category("Category");
EmblemChunk ugcId("UgcID");
if (PeekChunkSignature() == "CreatorID") {
    EmblemChunk creatorId("CreatorID");
}
EmblemChunk dateTime("DateTime");
EmblemChunk image("Image");
EmblemChunk end("----  end  ----");

#ifdef COREMATS_EMBLEM_LIB
} Emblem;
#endif
