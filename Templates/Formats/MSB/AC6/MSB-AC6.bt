//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: MSB/AC6/MSB-AC6.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: Coremats
// File Mask: *.msb
//  ID Bytes: 4D 53 42 20 01 00 00 00 10 00 00 00 00 00 01 FF
//   History: 
//------------------------------------------------

#include "../../../Common.bt"
#include "../MSB.bt"
#include "Model.bt"
#include "Event.bt"
#include "Point.bt"
#include "Route.bt"
#include "Layer.bt"
#include "Part.bt"

LittleEndian();

//------------------------------------------------

typedef struct (wstring assertName) {
    ParamHeader header; Assert(header.name == assertName);
    
    local int i <hidden=true>;
    for (i = 0; i < header.count - 1; i++) {
        FSeek(header.offsets[i]);
        switch (header.name) {
            case "MODEL_PARAM_ST": Model models; break;
            case "EVENT_PARAM_ST": Event events; break;
            case "POINT_PARAM_ST": Point points(header.version); break;
            case "ROUTE_PARAM_ST": Route routes; break;
            case "LAYER_PARAM_ST": Layer layers; break;
            case "PARTS_PARAM_ST": Part parts(header.version); break;
            default: Assert(false);
        }    
    }
} Param <read=ReadParamHeader(header)>;

//------------------------------------------------

Header header;
Param modelParam("MODEL_PARAM_ST");
FSeek(modelParam.header.nextParamOffset);
Param eventParam("EVENT_PARAM_ST");
FSeek(eventParam.header.nextParamOffset);
Param pointParam("POINT_PARAM_ST");
FSeek(pointParam.header.nextParamOffset);
Param routeParam("ROUTE_PARAM_ST");
FSeek(routeParam.header.nextParamOffset);
Param layerParam("LAYER_PARAM_ST");
FSeek(layerParam.header.nextParamOffset);
Param partsParam("PARTS_PARAM_ST");
Assert(partsParam.header.nextParamOffset == 0);
