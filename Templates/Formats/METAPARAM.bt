//------------------------------------------------
//--- 010 Editor v15.0.2 Binary Template
//
//      File: METAPARAM.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: Coremats
// File Mask: *.metaparam
//  ID Bytes: 53 4D 44 00
//   History: 
//------------------------------------------------

#include "../Common.bt"

struct StructBA;

LittleEndian();

//------------------------------------------------

typedef struct {
    char magic[4]; Assert(magic == "SMD\0");
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08; Assert(unk08 == 6);
    int count0c;
    quad offset10 <format=hex>; Assert(offset10 == 0x98 + 0x30 * count0c + 0x28);
    quad offset18 <format=hex>; Assert(offset18 == offset10);
    quad offset20 <format=hex>;
    int count28; Assert(offset20 == offset18 + 0x60 * count28);
    int count2c;
    int unk30;
    int unk34;
    int unk38;
    int unk3c <hidden=true>; Assert(!unk3c);
    int unk40;
    int unk44 <hidden=true>; Assert(!unk44);
    int unk48;
    int unk4c;
    int unk50;
    int unk54;
    int unk58;
    int unk5c <hidden=true>; Assert(!unk5c);
    int unk60 <hidden=true>; Assert(!unk60);
    int unk64 <hidden=true>; Assert(!unk64);
    int unk68 <hidden=true>; Assert(!unk68);
    int unk6c <hidden=true>; Assert(!unk6c);
    int unk70 <hidden=true>; Assert(!unk70);
    int unk74 <hidden=true>; Assert(!unk74);
    int unk78 <hidden=true>; Assert(!unk78);
    int unk7c <hidden=true>; Assert(!unk7c);
    int unk80 <hidden=true>; Assert(!unk80);
    int unk84 <hidden=true>; Assert(!unk84);
    int unk88 <hidden=true>; Assert(!unk88);
    int unk8c <hidden=true>; Assert(!unk8c);
    int unk90 <hidden=true>; Assert(!unk90);
    int unk94 <hidden=true>; Assert(!unk94);
} Header <bgcolor=cLtRed>;


typedef struct {
    quad offset00 <format=hex>;
    int unk08;
    int unk0c;
    quad offset10 <format=hex>;
    quad offset18 <format=hex>;
    int unk20;
    int unk24 <hidden=true>; Assert(!unk24);
    int unk28 <hidden=true>; Assert(!unk28);
    int unk2c <hidden=true>; Assert(!unk2c);
    
    PushTell();
    FSeek(offset00);
    wstring str00;
    FSeek(offset10);
    wstring str10;
    FSeek(offset18);
    wstring str18;
    SeekPop();
} StructA <read=(str00 + " // " + str10 + " // " + str18), bgcolor=cLtGreen, optimize=false>;


typedef struct {
    quad offset00 <format=hex>;
    int count08;
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
    int unk20 <hidden=true>; Assert(!unk20);
    int unk24 <hidden=true>; Assert(!unk24);
    
    if (count08) {
        JumpIn(offset00);
        StructBA structBAs[count08];
        JumpOut();
    }
} StructB <bgcolor=cRed>;

typedef struct {
    int unk00;
    int unk04 <hidden=true>; Assert(!unk04);
    int unk08;
    int unk0c;
    int unk10;
    int unk14 <hidden=true>; Assert(!unk14);
} StructBA <bgcolor=cDkRed, optimize=false>;


typedef struct {
    quad offset00 <format=hex>;
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
    int unk20 <hidden=true>; Assert(!unk20);
    int unk24;
    int unk28;
    int unk2c;
    int unk30;
    float unk34;
    int unk38;
    int unk3c;
    int unk40;
    int unk44;
    int unk48 <hidden=true>; Assert(!unk48);
    int unk4c <hidden=true>; Assert(!unk4c);
    int unk50 <hidden=true>; Assert(!unk50);
    int unk54 <hidden=true>; Assert(!unk54);
    int unk58 <hidden=true>; Assert(!unk58);
    int unk5c <hidden=true>; Assert(!unk5c);
    
    JumpIn(offset00);
    wstring str00;
    JumpOut();
} StructC <read=str00, bgcolor=cAqua, optimize=false>;


typedef struct {
    quad offset00 <format=hex>;
    int unk08 <hidden=true>; Assert(!unk08);
    int unk0c <hidden=true>; Assert(!unk0c);
    int unk10 <hidden=true>; Assert(!unk10);
    int unk14 <hidden=true>; Assert(!unk14);
    int unk18 <hidden=true>; Assert(!unk18);
    int unk1c <hidden=true>; Assert(!unk1c);
    int unk20 <hidden=true>; Assert(!unk20);
    int unk24;
    int unk28;
    int unk2c;
    int unk30;
    float unk34;
    float unk38;
    float unk3c;
    float unk40;
    float unk44;
    int unk48 <hidden=true>; Assert(!unk48);
    int unk4c <hidden=true>; Assert(!unk4c);
    
    JumpIn(offset00);
    wstring str00;
    JumpOut();
} StructD <read=str00, bgcolor=cAqua, optimize=false>;

//------------------------------------------------

Header header;
if (header.count0c) {
    StructA structAs[header.count0c];
}
StructB structB;

if (header.count28) {
    FSeek(header.offset18);
    StructC structCs[header.count28];
}
if (header.count2c) {
    FSeek(header.offset20);
    StructD structDs[header.count2c];
}
