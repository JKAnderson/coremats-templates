//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: SL2/USER_DATA000.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: Coremats
// File Mask: USER_DATA000
//  ID Bytes: 10 00 0C 00
//   History: 
//------------------------------------------------

#include "../../Types.bt"
#include "SL2-Types.bt"

struct BlockDataEquipmentLineup;
struct BlockDataGameDataMan;
struct BlockDataMissionAchieve;
struct BlockDataNpcArena;
struct BlockDataTutorial;
struct BlockDataUnlock;

LittleEndian();

//------------------------------------------------

typedef struct (string expectedType) {
    BlockHeader header; Assert(header.type == expectedType);
    
    local quad start <hidden=true> = FTell();
    switch (header.type) {
        case "---- begin ----":
        case "----  end  ----":
        case "DLC":
            Assert(header.version == 0 && header.length == 0);
            break;
            
        case "Activity":
            Assert(header.version == 0 && header.length == 0x20);
            ubyte data[header.length];
            break;
            
        case "ClearInfo":
            Assert(header.version == 0 && header.length == 4);
            ubyte data[header.length];
            break;
            
        case "Contribution":
            Assert(header.version == 0 && header.length == 9);
            ubyte data[header.length];
            break;
            
        case "EquipmentLineup":
            Assert(header.version == 0 && header.length == 0x2150);
            BlockDataEquipmentLineup equipmentLineup;
            break;
            
        case "Event":
            Assert(header.version == 1 && header.length == 0x13881);
            ubyte data[header.length];
            break;
            
        case "ForcedSortie":
            Assert(header.version == 0 && header.length == 0x74);
            ubyte data[header.length];
            break;
        
        case "GameDataMan":
            Assert(header.version == 0);
            BlockDataGameDataMan gameDataMan;
            break;
            
        case "GameData_Misc":
            Assert(header.version == 0 && header.length == 0x2b);
            ubyte data[header.length];
            break;
            
        case "MissionAchieve":
            Assert(header.version == 2 && header.length == 0x156);
            BlockDataMissionAchieve missionAchieve;
            break;
            
        case "MissionFlag":
            Assert(header.version == 2 && header.length == 0x804);
            ubyte data[header.length];
            break;
            
        case "NamePlateParts":
            Assert(header.version == 0 && header.length == 4);
            ubyte data[header.length];
            break;
        
        case "NpcArena":
            Assert(header.version == 0);
            BlockDataNpcArena npcArena;
            break;
            
        case "PartsToken":
            Assert(header.version == 0 && header.length == 0x19e);
            ubyte data[header.length];
            break;
            
        case "PlayerGameData":
            Assert(header.version == 1);
            ubyte data[header.length];
            break;
            
        case "SaveDataConvLog":
            Assert(header.version == 0 && header.length == 0x10);
            ubyte data[header.length];
            break;
            
        case "SaveFileHeader":
            Assert(header.version == 0 && header.length == 0xc4);
            ubyte data[header.length];
            break;
        
        case "Steam":
            Assert(header.version == 0 && header.length == 8);
            quad steamId64;
            break;
            
        case "TrophyEquipData":
            Assert(header.version == 0 && header.length == 0x20);
            ubyte data[header.length];
            break;
            
        case "Tutorial":
            Assert(header.version == 0);
            BlockDataTutorial tutorial;
            break;
        
        case "Unlock":
            Assert(header.version == 0);
            BlockDataUnlock unlock;
            break;
        
        default: Assert(false, Str("Unknown block type: \"%s\"", header.type));
    }
    Assert(FTell() == start + header.length);
} Block <read=ReadBlockHeader(this.header)>;


string ReadEquipId(int id) {
    if (id == -1) {
        return "-1";
    } else {
        return Str("%d/%d", id >> 28, id & 0x0fffffff);
    }
}

typedef struct {
    int id;
    int sold; Assert(sold == 0 || sold == 1);
    int unk08 <hidden=true>; Assert(unk08 == 0);
    int unk0c <hidden=true>; Assert(unk0c == 0);
    int unk10 <hidden=true>; Assert(unk10 == 0);
} EquipmentLineupA <read=Str("%s: %d", ReadEquipId(id), sold), optimize=false>;

typedef struct {
    int count;
    EquipmentLineupA list[count];
    
    int count2;
    int list2[count2];
    
    int count3;
    int list3[count3];
} BlockDataEquipmentLineup <bgcolor=cPurple>;


typedef struct {
    Block begin("---- begin ----");
    Block playerGameData("PlayerGameData");
    Block equipmentLineup("EquipmentLineup");
    Block missionAchieve("MissionAchieve");
    Block npcArena("NpcArena");
    Block contribution("Contribution");
    Block partsToken("PartsToken");
    Block namePlateParts("NamePlateParts");
    Block unlock("Unlock");
    Block tutorial("Tutorial");
    Block clearInfo("ClearInfo");
    Block trophyEquipData("TrophyEquipData");
    Block gameDataMisc("GameData_Misc");
    Block end("----  end  ----");
} BlockDataGameDataMan;


typedef struct {
    int missionId;
    byte rank;    
} MissionAchieve <read=Str("%d: %d", this.missionId, this.rank)>;

typedef struct {
    int missionCount;
    MissionAchieve missions[missionCount];
    
    // Presumably another count
    int unkB <hidden=true>; Assert(unkB == 0);
    
    int trainingCount;
    MissionAchieve training[trainingCount];
} BlockDataMissionAchieve;


typedef struct {
    int count;
    int arenaIds[count];
} BlockDataNpcArena <bgcolor=cLtYellow>;


typedef struct {
    int count;
    int tutorialIds[count];
} BlockDataTutorial <bgcolor=cDkYellow>;


typedef struct {
    int listCount;
    struct {
        int count;
        if (count) {
            int items[count];
        }
    } lists[listCount] <optimize=false>;
} BlockDataUnlock <bgcolor=cYellow>;

//------------------------------------------------

Sl2File file(0xc0010);
Block begin("---- begin ----");
Block saveFileHeader("SaveFileHeader");
Block gameDataMan("GameDataMan");
Block event("Event");
Block missionFlag("MissionFlag");
Block forcedSortie("ForcedSortie");
Block saveDataConvLog("SaveDataConvLog");
Block steam("Steam");
Block dlc("DLC");
Block activity("Activity");
Block end("----  end  ----");
