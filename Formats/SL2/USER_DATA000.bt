//------------------------------------------------
//--- 010 Editor v14.0 Binary Template
//
//      File: SL2/USER_DATA000.bt
//   Authors: TKGP
//   Version: 
//   Purpose: 
//  Category: Coremats
// File Mask: USER_DATA000
//  ID Bytes: 10 00 0C 00
//   History: 
//------------------------------------------------

#include "../../Types.bt"
#include "SL2-Types.bt"

struct BlockDataGameDataMan;
struct BlockDataNpcArena;
struct BlockDataTutorial;
struct BlockDataUnlock;

LittleEndian();

//------------------------------------------------

typedef struct (string expectedType) {
    BlockHeader header; Assert(header.type == expectedType);
    
    local quad start <hidden=true> = FTell();
    switch (header.type) {
        case "---- begin ----":
        case "----  end  ----":
        case "DLC":
            Assert(header.version == 0 && header.length == 0);
            break;
            
        case "Activity":
            Assert(header.version == 0 && header.length == 0x20);
            ubyte data[header.length];
            break;
            
        case "ClearInfo":
            Assert(header.version == 0 && header.length == 4);
            ubyte data[header.length];
            break;
            
        case "Contribution":
            Assert(header.version == 0 && header.length == 9);
            ubyte data[header.length];
            break;
            
        case "EquipmentLineup":
            Assert(header.version == 0 && header.length == 0x2150);
            ubyte data[header.length];
            break;
            
        case "Event":
            Assert(header.version == 1 && header.length == 0x13881);
            ubyte data[header.length];
            break;
            
        case "ForcedSortie":
            Assert(header.version == 0 && header.length == 0x74);
            ubyte data[header.length];
            break;
        
        case "GameDataMan":
            Assert(header.version == 0 && header.length == 0x1441f);
            BlockDataGameDataMan gameDataMan;
            break;
            
        case "GameData_Misc":
            Assert(header.version == 0 && header.length == 0x2b);
            ubyte data[header.length];
            break;
            
        case "MissionAchieve":
            Assert(header.version == 2 && header.length == 0x156);
            ubyte data[header.length];
            break;
            
        case "MissionFlag":
            Assert(header.version == 2 && header.length == 0x804);
            ubyte data[header.length];
            break;
            
        case "NamePlateParts":
            Assert(header.version == 0 && header.length == 4);
            ubyte data[header.length];
            break;
        
        case "NpcArena":
            Assert(header.version == 0);
            BlockDataNpcArena npcArena;
            break;
            
        case "PartsToken":
            Assert(header.version == 0 && header.length == 0x19e);
            ubyte data[header.length];
            break;
            
        case "PlayerGameData":
            Assert(header.version == 1 && header.length == 0x1197f);
            ubyte data[header.length];
            break;
            
        case "SaveDataConvLog":
            Assert(header.version == 0 && header.length == 0x10);
            ubyte data[header.length];
            break;
            
        case "SaveFileHeader":
            Assert(header.version == 0 && header.length == 0xc4);
            ubyte data[header.length];
            break;
        
        case "Steam":
            Assert(header.version == 0 && header.length == 8);
            quad steamId64;
            break;
            
        case "TrophyEquipData":
            Assert(header.version == 0 && header.length == 0x20);
            ubyte data[header.length];
            break;
            
        case "Tutorial":
            Assert(header.version == 0);
            BlockDataTutorial tutorial;
            break;
        
        case "Unlock":
            Assert(header.version == 0);
            BlockDataUnlock unlock;
            break;
        
        default: Assert(false, Str("Unknown block type: \"%s\"", header.type));
    }
    Assert(FTell() == start + header.length);
} Block <read=ReadBlockHeader(this.header)>;


typedef struct {
    Block begin("---- begin ----");
    Block playerGameData("PlayerGameData");
    Block equipmentLineup("EquipmentLineup");
    Block missionAchieve("MissionAchieve");
    Block npcArena("NpcArena");
    Block contribution("Contribution");
    Block partsToken("PartsToken");
    Block namePlateParts("NamePlateParts");
    Block unlock("Unlock");
    Block tutorial("Tutorial");
    Block clearInfo("ClearInfo");
    Block trophyEquipData("TrophyEquipData");
    Block gameDataMisc("GameData_Misc");
    Block end("----  end  ----");
} BlockDataGameDataMan;


typedef struct {
    int count;
    int arenaIds[count];
} BlockDataNpcArena <bgcolor=cLtYellow>;


typedef struct {
    int count;
    int tutorialIds[count];
} BlockDataTutorial <bgcolor=cDkYellow>;


typedef struct {
    int listCount;
    struct {
        int count;
        if (count) {
            int items[count];
        }
    } lists[listCount] <optimize=false>;
} BlockDataUnlock <bgcolor=cYellow>;

//------------------------------------------------

Sl2File file(0xc0010);
Block begin("---- begin ----");
Block saveFileHeader("SaveFileHeader");
Block gameDataMan("GameDataMan");
Block event("Event");
Block missionFlag("MissionFlag");
Block forcedSortie("ForcedSortie");
Block saveDataConvLog("SaveDataConvLog");
Block steam("Steam");
Block dlc("DLC");
Block activity("Activity");
Block end("----  end  ----");
